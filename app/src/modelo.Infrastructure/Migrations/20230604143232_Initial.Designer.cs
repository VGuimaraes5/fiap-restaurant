// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using modelo.Infrastructure.DataProviders;

#nullable disable

namespace modelo.Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230604143232_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("modelo.Domain.Entities.Categoria", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("tb_Categoria", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "Lanche"
                        },
                        new
                        {
                            Id = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Acompanhamento"
                        },
                        new
                        {
                            Id = "5117243c-b007-49e8-9a30-842ec79248ae",
                            Nome = "Bebida"
                        },
                        new
                        {
                            Id = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sobremesa"
                        });
                });

            modelBuilder.Entity("modelo.Domain.Entities.Cliente", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("CPF")
                        .HasColumnType("varchar(11)")
                        .HasColumnName("CPF");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("tb_Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11583292-066e-4ba8-9417-fda84e2781f1",
                            CPF = "54252344881",
                            Nome = "Juca"
                        },
                        new
                        {
                            Id = "3f41b1d4-7c76-4fed-b88a-721855912c70",
                            CPF = "34450347889",
                            Nome = "Blippi"
                        });
                });

            modelBuilder.Entity("modelo.Domain.Entities.Produto", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("CategoriaId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nome");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("tb_Produto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "110abdaa-716c-4728-ba22-9f8655d88b49",
                            CategoriaId = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "Hamburguer",
                            Valor = 8.00m
                        },
                        new
                        {
                            Id = "5bd4fb4f-efa9-4ff3-897a-849ee0edf756",
                            CategoriaId = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "Cheeseburger",
                            Valor = 9.00m
                        },
                        new
                        {
                            Id = "ba6c112a-e218-4bc4-b093-659025b7ff20",
                            CategoriaId = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "X Salada",
                            Valor = 10.00m
                        },
                        new
                        {
                            Id = "023ecbe3-3a43-4ed2-9f0f-958fa1e72c3e",
                            CategoriaId = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "X Bacon",
                            Valor = 11.00m
                        },
                        new
                        {
                            Id = "ef8497a2-b694-4f1b-9e98-2a350d8e3a53",
                            CategoriaId = "ada751db-8553-493f-b308-70bd29aed106",
                            Nome = "X Tudo",
                            Valor = 12.00m
                        },
                        new
                        {
                            Id = "c93f98d1-ecfa-4225-8249-e8939d491333",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Batata Frita Pequena",
                            Valor = 5.00m
                        },
                        new
                        {
                            Id = "90c625a3-9519-4d85-9723-27d2a626a2d8",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Batata Frita Media",
                            Valor = 7.00m
                        },
                        new
                        {
                            Id = "4ddd1974-0653-4163-bd8a-c73cb90d6f42",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Batata Frita Grande",
                            Valor = 9.00m
                        },
                        new
                        {
                            Id = "f72749bb-d658-4029-9c87-5a8e371b2b8f",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Chicken Nuggets 4 unidades",
                            Valor = 6.00m
                        },
                        new
                        {
                            Id = "3cb9bb22-cd7a-4cb4-a89c-4c4d9c05a4f2",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Chicken Nuggets 8 unidades",
                            Valor = 12.00m
                        },
                        new
                        {
                            Id = "d474d3ee-1d34-4b7b-879a-d461f4c38312",
                            CategoriaId = "cf412102-35da-43d8-9c3c-b72546104c72",
                            Nome = "Chicken Nuggets 12 unidades",
                            Valor = 16.00m
                        },
                        new
                        {
                            Id = "eefd47f7-db03-483f-9f02-5370c3c89dff",
                            CategoriaId = "5117243c-b007-49e8-9a30-842ec79248ae",
                            Nome = "Coca Cola Pequena",
                            Valor = 6.00m
                        },
                        new
                        {
                            Id = "00830efc-97fc-4647-af7b-9a7f5643db11",
                            CategoriaId = "5117243c-b007-49e8-9a30-842ec79248ae",
                            Nome = "Coca Cola Media",
                            Valor = 8.00m
                        },
                        new
                        {
                            Id = "b66dbe6c-00f9-4a08-bcd8-9f7bcd729c72",
                            CategoriaId = "5117243c-b007-49e8-9a30-842ec79248ae",
                            Nome = "Coca Cola Grande",
                            Valor = 10.00m
                        },
                        new
                        {
                            Id = "443a0adb-c99a-42dc-a0e0-96873c3737ef",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sorverte de Baunilha",
                            Valor = 3.00m
                        },
                        new
                        {
                            Id = "3ba8c219-8f0b-4fe1-ac28-d02f120d2ef2",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sorverte de Chocolate",
                            Valor = 3.00m
                        },
                        new
                        {
                            Id = "8de550a8-694f-479a-8905-4e396a736123",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sorverte de Misto",
                            Valor = 3.00m
                        },
                        new
                        {
                            Id = "423acf91-556f-4ce5-8e7d-50c1c01332ec",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sundae de Baunilha",
                            Valor = 6.00m
                        },
                        new
                        {
                            Id = "25898dc9-dc9d-43d6-9c24-7548f5ca1dc7",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sundae de Chocolate",
                            Valor = 6.00m
                        },
                        new
                        {
                            Id = "7b88e08c-62af-4497-9b18-2f63b5b826b5",
                            CategoriaId = "32f0c5f0-d9ba-40e2-8d7a-57eed4727e2b",
                            Nome = "Sundae Misto",
                            Valor = 6.00m
                        });
                });

            modelBuilder.Entity("modelo.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<string>("Summary")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("Summary");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer")
                        .HasColumnName("TemperatureC");

                    b.Property<int>("TemperatureF")
                        .HasColumnType("integer")
                        .HasColumnName("TemperatureF");

                    b.HasKey("Id");

                    b.ToTable("tb_WeatherForecast", (string)null);
                });

            modelBuilder.Entity("modelo.Domain.Entities.Produto", b =>
                {
                    b.HasOne("modelo.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("modelo.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
